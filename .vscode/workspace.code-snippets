{
  "Import and export": {
    "scope": "javascript,typescript",
    "prefix": "ie",
    "body": ["import $1 from './$1'", "", "export default $1", ""],
    "description": "Import and export"
  },
  "Typescript React Component": {
    "scope": "typescriptreact",
    "prefix": "trc",
    "body": [
      "import * as React from 'react'",
      "import styled from 'styled-components'",
      "",
      "export interface Props {$3}",
      "",
      "export interface State {$4}",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends React.Component<Props, State> {",
      "",
      "  public static defaultProps: Partial<Props> = {}",
      "",
      "  public constructor (props: Props) {",
      "    super(props)",
      "",
      "    this.state = {}",
      "  }",
      "",
      "  public render () {",
      "    const {} = this.props",
      "",
      "    return (",
      "      <Wrapper>${1:TM_FILENAME_BASE }</Wrapper>",
      "    )",
      "  }",
      "",
      "}",
      "",
      "const Wrapper = styled.div``",
      ""
    ],
    "description": "Typescript React Component"
  },
  "Typescript React Stateless Component": {
    "scope": "typescriptreact",
    "prefix": "func",
    "body": [
      "interface ${1:${TM_FILENAME_BASE}}Props {$3}",
      "",
      "function ${1:${TM_FILENAME_BASE}} (props: ${1:${TM_FILENAME_BASE}}Props) {",
      "  return (",
      "    <div>$2</div>",
      "  )",
      "}"
    ],
    "description": "Typescript React Stateless Component"
  },
  "Tag Component": {
    "scope": "typescriptreact",
    "prefix": "styl",
    "body": "const ${1:Wrapper} = styled.${2:div}`$3`"
  },
  "react fun com": {
    "scope": "typescriptreact",
    "prefix": "trf",
    "body": [
      "import styled from 'styled-components'",
      "import React, { useState, useEffect } from 'react'",
      "import { Button } from 'antd'",
      "export interface Props {} ",
      "",
      "export default function ${1:${TM_FILENAME_BASE}} () {",
      "",
      "return <Wrapper>Wrapper</Wrapper>",
      "}",
      "const Wrapper = styled.div``"
    ]
  },
  "react mobx": {
    "scope": "typescript",
    "prefix": "mobx",
    "body": [
      "import { observable, computed, action } from 'mobx'",
      "",
      "class ${1:${TM_FILENAME_BASE}} {",
      "@observable public title = ''",
      "@computed",
      "public get getTitle () {",
      "return this.title",
      "}",
      "@action",
      "public setTitle = (newTitle: any) => {",
      "this.title = newTitle",
      "}",
      "}",
      "",
      "export const scheduleHomeViewModel = new ScheduleHomeViewModel()"
    ]
  },
  "react service": {
    "scope": "typescript",
    "prefix": "service",
    "body": [
      "import BaseApiService from 'src/services/api/BaseApiService'",
      "export default class ${1:${TM_FILENAME_BASE}} extends BaseApiService {",
      "public getByFormCodePC(obj: any) {",
      "return this.post(`/auditeNurseList/getByFormCodePC`, this.stringify(obj))",
      "}",
      "}",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = new ${1:${TM_FILENAME_BASE}}()"
    ]
  },
  "react modal": {
    "scope": "typescriptreact",
    "prefix": "modal",
    "body": [
      "import styled from 'styled-components'",
      "import React, { useState, useEffect, useLayoutEffect } from 'react'",
      "import { Modal, Input, Button, Radio, DatePicker, Select, Row, Col, message } from 'antd'",
      "import { ModalComponentProps } from 'src/libs/createModal'",
      "import Form from 'src/components/Form'",
      "import { to } from 'src/libs/fns'",
      "import { Rules } from 'src/components/Form/interfaces'",
      "",
      "const Option = Select.Option",
      "export interface Props extends ModalComponentProps {",
      "  /** 表单提交成功后的回调 */",
      "  onOkCallBack?: () => {}",
      "}",
      "",
      "/** 设置规则 */",
      "const rules: Rules = {",
      "  publicDate: (val) => !!val || '请填写发表日期'",
      "}",
      "",
      "export default function  ${1:${TM_FILENAME_BASE}}(props: Props) {",
      "  const [title, setTitle] = useState('')",
      "",
      "  let { visible, onCancel } = props",
      "  let refForm = React.createRef<Form>()",
      "",
      "  const onSave = async () => {",
      "    if (!refForm.current) return",
      "    let [err, value] = await to(refForm.current.validateFields())",
      "    if (err) return",
      "",
      "    /** 保存接口 */",
      "    // service(value).then((res: any) => {",
      "    //   message.success('保存成功')",
      "    //   props.onOkCallBack && props.onOkCallBack()",
      "    //   onCancel()",
      "    // })",
      "  }",
      "",
      "  useLayoutEffect(() => {",
      "    if (refForm.current && visible) refForm!.current!.clean()",
      "    /** 如果是修改 */",
      "    if (refForm.current && visible) {",
      "      /** 表单数据初始化 */",
      "      refForm!.current!.setFields({",
      "        publicDate: '',",
      "        title: ''",
      "      })",
      "    }",
      "  }, [visible])",
      "",
      "  return (",
      "    <Modal title={title} visible={visible} onCancel={onCancel} onOk={onSave} okText='保存' forceRender>",
      "      <Form ref={refForm} rules={rules} labelWidth={80}>",
      "        <Row>",
      "          <Col span={24}>",
      "            <Form.Field label={`发表日期`} name='publicDate' required>",
      "              <DatePicker />",
      "            </Form.Field>",
      "          </Col>",
      "",
      "          <Col span={24}>",
      "            <Form.Field label={`题目`} name='title'>",
      "              <Input />",
      "            </Form.Field>",
      "          </Col>",
      "        </Row>",
      "      </Form>",
      "    </Modal>",
      "  )",
      "}",
      "const Wrapper = styled.div``"
    ]
  },
  "left menu page": {
    "scope": "typescriptreact",
    "prefix": "lmp",
    "body": [
      "import LeftMenu from 'src/components/LeftMenu'",
      "import styled from 'styled-components'",
      "import React, { useEffect, useState } from 'react'",
      "import { RouteComponentProps } from 'src/components/RouterView'",
      "import { appStore } from 'src/stores'",

      "export interface Props extends RouteComponentProps<{ name?: string }> {}",

      "const LEFT_MENU_CONFIG = [",
      "  {",
      "    title: '质控记录',",
      "    path: '/quality/qualityControlRecord',",
      "    component: null",
      "  },",
      "  {",
      "    title: '查询统计',",
      "    path: '/quality/queryStatistics',",
      "    component: null",
      "  },",
      "  {",
      "    title: '分析报告',",
      "    path: '/quality/analysis',",
      "    component: null",
      "  }",
      "]",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}(props: Props) {",
      "  useEffect(() => {}, [props.match.params.name])",
      "  let currentRoutePath = props.match.url || ''",
      "  let currentRoute = getTargetObj(LEFT_MENU_CONFIG, 'path', currentRoutePath)",
      "  // 筛选目标对象",
      "  function getTargetObj(listDate: any, targetKey: string, targetName: string) {",
      "    let chooseRoute = listDate.find((item: any) => {",
      "      if (item.children) {",
      "        return item.children.find((item1: any) => item1[targetKey] === targetName)",
      "      } else {",
      "        return item[targetKey] === targetName",
      "      }",
      "    })",
      "    if (chooseRoute && chooseRoute.children) {",
      "      chooseRoute = chooseRoute.children.find((item1: any) => item1[targetKey] === targetName)",
      "    }",
      "    return chooseRoute",
      "  }",
      "",
      "  return (",
      "    <Wrapper>",
      "      <LeftMenuCon>",
      "        <LeftMenu config={LEFT_MENU_CONFIG} />",
      "      </LeftMenuCon>",
      "      <MainCon>",
      "        {currentRoute && currentRoute.component && (",
      "          <currentRoute.component getTitle={currentRoute && currentRoute.title} />",
      "        )}",
      "      </MainCon>",
      "    </Wrapper>",
      "  )",
      "}",
      "const Wrapper = styled.div`",
      "  overflow: hidden;",
      "  height: calc(100vh - 50px);",
      "  display: flex;",
      "  align-items: stretch;",
      "`",
      "",
      "const LeftMenuCon = styled.div`",
      "  width: 200px;",
      "`",
      "const MainCon = styled.div`",
      "  flex: 1;",
      "  width: 0;",
      "  align-items: stretch;",
      "  display: flex;",
      "  flex-direction: column;",
      "`",
      ""
    ]
  },
  "service": {
    "scope": "typescriptreact",
    "prefix": "service",
    "body": [
      "import BaseApiService from 'src/services/api/BaseApiService'",
      "export default class ${TM_FILENAME_BASE} extends BaseApiService {",
      "public getBoxSize() {",
      "return this.get(`/mail/boxSize`)",
      "}",
      "}",
      "export const ${TM_FILENAME_BASE} = new ${TM_FILENAME_BASE}()"
    ]
  },
  "table": {
    "scope": "typescriptreact",
    "prefix": "table",
    "body": [
      "import styled from 'styled-components'",
      "import React, { useState, useEffect } from 'react'",
      "import { Button } from 'antd'",
      "import { ColumnProps } from 'src/vendors/antd'",
      "import BaseTable, { DoCon } from 'src/components/BaseTable'",
      "export interface Props {}",
      "export default function TitleTable() {",
      "const dataSource: any[] = []",
      "const columns: ColumnProps<any>[] = [",
      "{",
      "title: '项目名称'",
      "},",
      "{",
      "title: '列宽度'",
      "},",
      "{",
      "title: '基数'",
      "},",
      "{",
      "title: '下拉选项预设值'",
      "},",
      "{",
      "title: '操作',",
      "render(text: string, record: any, index: number) {",
      "return (",
      "<DoCon>",
      "<span>编辑</span>",
      "<span>删除</span>",
      "</DoCon>",
      ")",
      "}",
      "}",
      "]",
      "return (",
      "<Wrapper>",
      "<BaseTable dataSource={dataSource} columns={columns} type={['index']} />",
      "</Wrapper>",
      ")",
      "}",
      "const Wrapper = styled.div``"
    ]
  },
  "tablepage": {
    "scope": "typescriptreact",
    "prefix": "tablepage",
    "body": [
      "import styled from 'styled-components'",
      "import React, { useState, useEffect } from 'react'",
      "import { Button } from 'antd'",
      "import { PageHeader, PageTitle, Place } from 'src/components/common'",
      "import { DatePicker, Select, ColumnProps, PaginationConfig } from 'src/vendors/antd'",
      "import DeptSelect from 'src/components/DeptSelect'",
      "import { appStore, authStore } from 'src/stores'",
      "import BaseTable from 'src/components/BaseTable'",
      "import { qcOneService } from '../../services/QcOneService'",
      "import { useCallback } from 'src/types/react'",
      "import { DoCon } from 'src/components/BaseTable'",
      "import { observer } from 'mobx-react-lite'",
      "import { DictItem } from 'src/services/api/CommonApiService'",
      "export interface Props {}",

      "export default observer(function  ${TM_FILENAME_BASE}() {",
      "const [dataSource, setDataSource] = useState([])",
      "const [pageLoading, setPageLoading] = useState(false)",
      "const columns: ColumnProps<any>[] = [",
      "{",
      "title: '日期',",
      "dataIndex: 'recordDate',",
      "render(text: string, record: any, index: number) {",
      "return text ? text.split(' ')[0] : ''",
      "}",
      "},",
      "{",
      "title: '时间'",
      "},",
      "{",
      "title: '问题种类'",
      "},",
      "{",
      "title: '详情'",
      "},",
      "{",
      "title: '创建人'",
      "},",
      "{",
      "title: '创建时间'",
      "},",
      "{",
      "title: '操作',",
      "width: 100,",
      "render(text: any, record: any, index: number) {",
      "return (",
      "<DoCon>",
      "<span onClick={() => onDetail(record)}>查看详情</span>",
      "</DoCon>",
      ")",
      "}",
      "}",
      "]",
      "",
      "const [pageOptions, setPageOptions]: any = useState({",
      "pageIndex: 1,",
      "pageSize: 20,",
      "})",
      "const [total, setTotal]: any = useState(0)",
      "const getData = () => {",
      "setPageLoading(true)",
      "qcOneService.qcSafetyCheckGetPage({ ...pageOptions, wardCode: authStore.selectedDeptCode }).then((res) => {",
      "setTotal(res.data.totalCount)",
      "setDataSource(res.data.list)",
      "setPageLoading(false)",
      "})",
      "}",
      "",
      "const onDetail = (record: any) => {}",
      "useEffect(() => {",
      "getData()",
      "}, [pageOptions.pageIndex, pageOptions.pageSize])",
      "",
      "return (",
      "<Wrapper>",
      "<PageHeader>",
      "<PageTitle>安全隐患排查表</PageTitle>",
      "<Place />",
      "<span className='label'>日期:</span>",
      "<DatePicker.RangePicker allowClear={false} style={{ width: 220 }} />",
      "<span className='label'>科室:</span>",
      "<DeptSelect onChange={() => {}} />",
      "<span className='label'>护士:</span>",
      "<Select>{/* <Select.Option>123</Select.Option> */}</Select>",
      "<Button onClick={() => getData()}>查询</Button>",
      "<Button type='primary' onClick={() => {}}>",
      "添加",
      "</Button>",
      "<Button>导出</Button>",
      "</PageHeader>",

      "<BaseTable",
      "loading={pageLoading}",
      "dataSource={dataSource}",
      "columns={columns}",
      "wrapperStyle={{ margin: '0 15px' }}",
      "type={['index', 'fixedIndex']}",
      "surplusWidth={200}",
      "surplusHeight={220}",
      "pagination={{",
      "current: pageOptions.pageIndex,",
      "pageSize: pageOptions.pageSize,",
      "total: total",
      "}}",
      "onChange={(pagination: PaginationConfig) => {",
      "setPageOptions({",
      "pageIndex: pagination.current,",
      "pageSize: pagination.pageSize,",
      "})",
      "}}",
      "onRow={(record: any) => {",
      "return { onDoubleClick: () => onDetail(record) }",
      "}}",
      "/>",
      "</Wrapper>",
      ")",
      "})",
      "const Wrapper = styled.div``"
    ]
  }
}
